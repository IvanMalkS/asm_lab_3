        LXI H, 0x002A   ; Указываем на начало массива (индекс 0)
        MVI B, 0        ; B = Текущий Индекс = 0
        MVI C, 0        ; C = Сумма элементов с НЕЧЕТНЫМИ индексами
        MVI D, 0        ; D = Сумма элементов с ЧЕТНЫМИ индексами
        MVI E, 10       ; E = Количество элементов для обработки

SUM_LOOP:
        ; --- Проверка условия выхода из цикла ---
        MOV A, B        ; Переносим текущий индекс в A для сравнения
        CMP E           ; Сравниваем Текущий Индекс (B) с Количеством Элементов (E)
        JZ END          ; Если индекс равен 10 (обработали 0..9), выходим

        ; --- Проверка четности ИНДЕКСА ---
        MOV A, B        ; Снова берем индекс в A (CMP мог изменить флаги)
        ANI 0x01        ; Оставляем только младший бит индекса (0 для четных, 1 для нечетных)
        JZ INDEX_EVEN   ; Если результат 0 (младший бит = 0), то индекс ЧЕТНЫЙ

INDEX_ODD:
        ; --- Индекс НЕЧЕТНЫЙ ---
        MOV A, M        ; Загружаем ЗНАЧЕНИЕ элемента массива в A
        ADD C           ; Добавляем значение к сумме НЕЧЕТНЫХ индексов (в A)
        MOV C, A        ; Сохраняем обновленную сумму НЕЧЕТНЫХ индексов в C
        JMP NEXT_ITER   ; Переходим к следующей итерации

INDEX_EVEN:
        ; --- Индекс ЧЕТНЫЙ ---
        MOV A, M        ; Загружаем ЗНАЧЕНИЕ элемента массива в A
        ADD D           ; Добавляем значение к сумме ЧЕТНЫХ индексов (в A)
        MOV D, A        ; Сохраняем обновленную сумму ЧЕТНЫХ индексов в D
        ; JMP не нужен, переход к NEXT_ITER произойдет автоматически

NEXT_ITER:
        INX H           ; Увеличиваем указатель (H) на следующий элемент массива
        INR B           ; Увеличиваем счетчик ИНДЕКСА (B)
        JMP SUM_LOOP    ; Возвращаемся к началу цикла

END:
        ; --- Сохранение результатов ---
        ; Предположим, мы хотим сохранить суммы по другим адресам,
        ; чтобы не перезаписать входные данные или код.
        ; Например, 0x0040 - четная сумма, 0x0041 - нечетная сумма.
        LXI H, 0x0040   ; Устанавливаем адрес для сохранения ЧЕТНОЙ суммы
        MOV M, D        ; Сохраняем сумму четных индексов (D)
        INX H           ; Переходим к адресу 0x0041
        MOV M, C        ; Сохраняем сумму нечетных индексов (C)
        HLT             ; Завершение программы
